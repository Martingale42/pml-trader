[project]
name = "probabilistic_trading"
version = "0.1.2"
description = "probabilistic-based trading system using nautilus_trader"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "python-dotenv>=1.0.1",
    "pandas>=2.2.3",
    "polars>=1.24.0",
    "numpy==1.26.4",
    "numba>=0.61.0",
    "nautilus-trader @ file:///Users/ohh/Code/nautilus_trader",
    "dynamax==0.1.5",
    "scikit-learn>=1.6.1",
    "matplotlib>=3.10.1",
    "seaborn>=0.13.2",
    "lightweight-charts>=2.1",
    "jupyterlab>=4.3.5",
    "jupytext>=1.16.7",
    "psycopg2-binary>=2.9.1",
    "redis>=5.2.1",
]


[project.optional-dependencies]

# CUDA 版本
cuda = [
    "jax[cuda12]==0.4.25",
    "jaxlib[cuda12_pip]==0.4.25",
]

# 標準 CPU 版本
cpu = [
    "jax==0.4.25",
    "jaxlib==0.4.25",
]

dev = [
    "pytest>=8.3.5",
    "pre-commit>=4.1.0",
    "pandas-stubs>=2.2.0",
    "docformatter>=1.7.5",
    "black>=25.1.0",
    "ruff>=0.9.9",
    "mypy>=1.10.0"
]

# 全部依賴（包括開發工具）
all = [
    "jax==0.4.25",  # CPU版本
    "jaxlib==0.4.25",  # CPU版本
    "pytest>=8.3.4",
    "pre-commit>=4.1.0",
    "pandas-stubs>=2.2.0",
    "docformatter>=1.7.5",
    "black>=25.1.0",
    "ruff>=0.9.9",
    "mypy>=1.10.0"
]

[tool.black]
target_version = ["py311", "py312"]
line_length = 100

[tool.ruff]
target-version = "py312"
line-length = 100

exclude = [
    ".benchmarks",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "venv",
    "research/reference",
]

[tool.ruff.lint]
select = [
    "C4",   # flake8-comprehensions
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "C90",  # mccabe
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "S",    # bandit
    "T10",  # flake8-debugger
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "I",    # isort
    "RSE",  # flake8-raise
    "TID",  # flake8-tidy-imports
    "PD",   # pandas-vet
    "NPY",  # numpy rules
    "RUF",  # ruff-specific rules
]

ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line with quotes
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line
    "D400",  # First line should end with a period
    "D413",  # Missing blank line after last section
    "D415",  # First line should end with a period, question mark, or exclamation point
    "D416",  # Section name should end with a colon
    "E741",  # Ambiguous variable name
    "PD901", # DataFrame variable name
    "RUF012", # Mutable class attributes
    "S101",  # Use of assert detected
    "S105",  # Possible hardcoded password
    "S106",  # Possible hardcoded password
    "S113",  # Requests without timeout
    "S603",  # Subprocess without input validation
]

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-single-line = true
single-line-exclusions = ["typing"]
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.docformatter]
black = true
make-summary-multi-line = true
pre-summary-new-line = true
blank = true
recursive = true
in-place = true

[tool.mypy]
python_version = "3.12"
disallow_incomplete_defs = true
check_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["probabilistic_trading"]

[tool.hatch.metadata]
allow-direct-references = true